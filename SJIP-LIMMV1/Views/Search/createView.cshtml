@using PagedList.Mvc;
@using SJIP_LIMMV1.Models;
@model  SJIP_LIMMV1.Models.SearchViewModel
@{
    ViewBag.Title = "CreateView";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
@section scripts{
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script>
        $(function () {
            var dateFormat = "mm/dd/yy",
                from = $("#from")
                    .datepicker({
                        defaultDate: "+1w",
                        changeMonth: true,
                        changeYear: true,
                        numberOfMonths: 1,
                        
                    })
                    .on("change", function () {
                        to.datepicker("option", "minDate", getDate(this));
                    }),
                to = $("#to").datepicker({
                    defaultDate: "+1w",
                    changeMonth: true,
                    numberOfMonths: 1
                })
                    .on("change", function () {
                        from.datepicker("option", "maxDate", getDate(this));
                    });

            function getDate(element) {
                var date;
                try {
                    date = $.datepicker.parseDate(dateFormat, element.value);
                } catch (error) {
                    date = null;
                }

                return date;
            }
        });
    </script>
}
<style>
    .validationError {
        color: red;
    }

    * {
        box-sizing: border-box;
    }

    body {
        font: 16px Arial;
    }

    /*the container must be positioned relative:*/
    .autocomplete {
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid transparent;
        background-color: #f1f1f1;
        padding: 10px;
        font-size: 16px;
    }

        input[type=text] {
            background-color: #f1f1f1;
            width: 100%;
        }

        input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
            cursor: pointer;
        }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            /*when hovering an item:*/
            .autocomplete-items div:hover {
                background-color: #e9e9e9;
            }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>
<head>
    <script src="~/Scripts/jquery-3.3.1.min.js"></script>   
</head>

<body>
    <div class="container body-content">

        <div class="container">

            <div class="row justify-content-start" style="padding-top:10px;">
                <h1>Search Info</h1>
            </div>

            <form id="myForm">
                <div class="col-sm-12">

                    <div class="col-sm-6" style="padding-top:10px;">

                        <div class="col-sm-12">

                            <div class="col-sm-3" style="padding-top:15px;">
                                @Html.LabelFor(x => x.TownCouncil)
                            </div>
                            <div class="col-sm-9" style="padding-top:5px;">
                                @Html.TextBoxFor(x => x.TownCouncil)
                            </div>
                        </div>

                        <div class="col-sm-12">
                            @Html.ValidationMessageFor(x => x.TownCouncil, "", new { @class = "validationError" })
                        </div>

                        <div class="col-sm-12">

                            <div class="col-sm-3" style="padding-top:15px;">
                                @Html.LabelFor(x => x.Block)
                            </div>
                            <div class="col-sm-9" style="padding-top:5px;">
                                @Html.TextBoxFor(x => x.Block)
                            </div>

                        </div>

                        <div class="col-sm-12">
                            @Html.ValidationMessageFor(x => x.Block, "", new { @class = "validationError" })
                        </div>

                    </div>

                    <div class="col-sm-6" style="padding-top:10px;">

                        <div class="col-sm-12">

                            <div class="col-sm-3" style="padding-top:15px;">
                                @Html.LabelFor(x => x.SIMCard)
                            </div>
                            <div class="col-sm-9" style="padding-top:5px;">
                                @Html.TextBoxFor(x => x.SIMCard)
                            </div>
                        </div>

                        <div class="col-sm-12">
                            @Html.ValidationMessageFor(x => x.SIMCard, "", new { @class = "validationError" })
                        </div>


                        <div class="col-sm-12">
                            <div class="col-sm-3" style="padding-top:15px;">
                                @Html.LabelFor(x => x.LMPD)
                            </div>
                            <div class="col-sm-9" style="padding-top:5px;">
                                @Html.TextBoxFor(x => x.LMPD)
                            </div>
                        </div>

                        <div class="col-sm-12">
                            @Html.ValidationMessageFor(x => x.LMPD, "", new { @class = "validationError" })
                        </div>

                    </div>

                </div>
                @*<div class="col-sm-12">

                        <label>Select a date range: From</label>


                        @Html.TextBoxFor(x => x.StartDate, new { id = "from", @class = "datepicker" })

                        <label>To </label>

                        @Html.TextBoxFor(x => x.EndDate, new { id = "to", @class = "datepicker" })

                    </div>*@
                <div class="col-sm-12">
                    <span style="padding-top:10px;padding-bottom:10px; ">

                        <input type="button" id="search" value="Search">

                    </span>
                    <span style="padding-top:10px;padding-bottom:10px; ">

                        <input type="button" id="clear" value="Clear">

                    </span>
                </div>
            </form>
            <div class="col-sm-12" id="resultTable" style="padding-top:10px;">
                @Html.Partial("_SearchResult", (PagedList.PagedList<SearchDTO>)@ViewBag.InitPagedList)
            </div>

            <div class="modal fade" id="MyModal" role="dialog">
                <div class="modal-dialog" style="background-color:white;">
                    <div class="modal-header">
                        <a href="#" class="close" data-dismiss="modal">&times;</a>
                        <h4 id="ModalTitle">Sensor Box Info</h4>
                    </div>
                    <div class="modal-body">
                        <form id="popupform">
                            <fieldset>

                                <div class="form-group">
                                    <label>PostalCode:</label>
                                    <label class="form-control" id="popupformPostalCode"></label>
                                </div>
                                <div class="form-group">
                                    <label>BlockNo:</label>
                                    <label class="form-control" id="popupformBlockNo"></label>
                                </div>
                                <div class="form-group">
                                    <label>TownCouncil:</label>
                                    <label class="form-control" id="popupformTownCouncil"></label>
                                </div>
                                <div class="form-group">
                                    <label>SIMCard:</label>
                                    <label class="form-control" id="popupformSIMCard"></label>
                                </div>
                                <div class="form-group">
                                    <label>LMPD:</label>
                                    <label class="form-control" id="popupformLMPD"></label>
                                </div>
                            </fieldset>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

    </div>


    <div class="autocomplete" style="width:320px;">
        <input style="max-width: 380px;" id="myInput" type="text"  placeholder="type to search sensorBox Info">
    </div>
    <input id="submitBtn" type="submit"> Maximum Number of Result Shown 
    <select id="MaxSearchResult">
        <option value="1">1</option>
        <option value="10">10</option>
        <option value="15">15</option>
        <option value="20">20</option>
        <option value="25">25</option>
    </select>
    
</body>

<script>
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            //create a scroll bar for all items
            a.setAttribute("style", " height: 300px; overflow-y: scroll;");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            var maxResult = parseInt($("#MaxSearchResult").children("option:selected").val());
            //create a counter to count the number of matching results
            var matchingNo = 1;
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item has the same letters as the text field value: and limit to matching return to first 5 items*/
                if ((arr[i].toLowerCase().search(val.toLowerCase()) != -1) && (matchingNo <= maxResult)) {
                    //increase the matched result counter if matching found
                    matchingNo++;
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    //split option into sub array
                    var subArr = arr[i].split(",");
                    //create new string for display in input box(id field removed from the original string)
                    var newString = arr[i].substr(arr[i].indexOf(",") + 1);
                    for (var k = 1; k < subArr.length; k++) {
                        var valStartPosition = subArr[k].toLowerCase().search(val.toLowerCase());
                        var subOptionString = "";
                        if (valStartPosition != -1) {
                            /*make the matching letters bold:*/
                            subOptionString = subArr[k].substr(0, valStartPosition);
                            subOptionString += "<strong>" + subArr[k].substr(valStartPosition, val.length) + "</strong>";
                            subOptionString += subArr[k].substr(valStartPosition + val.length);
                        }
                        //always display first 3 subOption(exclude ID field) if any part of the option contain search word
                        else if (k <= 3) {
                            subOptionString = subArr[k];
                        }
                        //re-assemble option 
                        b.innerHTML += subOptionString + ",";
                    }
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input id='"+subArr[0]+"' type='hidden' value='" + newString + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        //insert ID to autocomplete name field
                        inp.name = this.getElementsByTagName("input")[0].id;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });

                    a.appendChild(b);

                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    function changePage() {
        var pageSize = $('#pageSizeDropdownList').val();

        $.ajax({
            url: "/Search/PagedResult?Size=" + pageSize,
            type: 'GET',
            cache: false,

            success: function (result) {
                debugger;
                $("#resultTable").html(result);//use returned data to render data table
            },
            error: function () {
                alert("DropdownList ajax error")
            }
        });
    }

    $(document).ready(function () {

        $("#submitBtn").click(function () {
            var id = $("#myInput").attr("name");
            $("#MyModal").modal('show');
            $.ajax({
                type: "GET",
                url: "/Search/GetInfoById",
                data: { 'id': id },
                success: function (result) {
                    debugger;
                    //a returned SensorBox Json object used for render the pop-up modal       
                    $("#popupformPostalCode").html(result.PostalCode);
                    $("#popupformBlockNo").html(result.BlockNo);
                    $("#popupformTownCouncil").html(result.TownCouncil);
                    $("#popupformSIMCard").html(result.SIMCard);
                    $("#popupformLMPD").html(result.LMPD);
                },
                error: function () {

                    alert("autocomplete submitBtn click error")
                }
            });
        });
    
        $.ajax({
            type: "GET",
            url: "/Search/LoadAutocompleteData",
            success: function (result) {
                autocomplete(document.getElementById("myInput"), result);
                debugger;
            },
            error: function () {
                alert("autocomplete data loading error")
            }
        });      

        $("#liveSearchBtn").click(function () {  

            var datalistOption = $("#searchDataList").children();
            var inputText = $("#inputText").val();
            var id = 0;
            //check if text in textBox same as any DataList options
            //if any match found, the id of option will be sent to backend
            for (var i = 0; i < datalistOption.length; i++) {
                var nodeValue = datalistOption[i].value;
                if (nodeValue === inputText) {
                    id = datalistOption[i].id;
                }
            }
            $("#MyModal").modal('show'); 
            $.ajax({
                type: "GET",
                url: "/Search/GetInfoById",
                data: { 'id': id },
                success: function (result) {
                    debugger;
            //a returned SensorBox Json object used for render the pop-up modal       
                    $("#popupformPostalCode").html(result.PostalCode);
                    $("#popupformBlockNo").html(result.BlockNo);
                    $("#popupformTownCouncil").html(result.TownCouncil);
                    $("#popupformSIMCard").html(result.SIMCard);
                    $("#popupformLMPD").html(result.LMPD);                   
                      

                },
                error: function () {

                    alert("GetInfoById ajax error")
                }
            });
        })
        //jQuery used to direct each page number click to PagedResult action(searchController) and get back a partial view of data table
        $(document).on("click", "#contentPager a", function (e) {
            var page;
            //first check if user click the "next"/"prev" link
            if ($(this).attr("rel") === "next") {
                page = parseInt($(this).attr("href").split('=')[1]);
            }
            else if ($(this).attr("rel") === "prev") {
                page = parseInt($(this).attr("href").split('=')[1]);
            }
            else {
                page = parseInt($(this).html());//get page number of the link later pass this param to controller

            }

            var pageSize = $("#pageSizeDropdownList").val();

            $.ajax({
                url: "/Search/PagedResult?page=" + page + "&size=" + pageSize,
                type: 'GET',
                cache: false,
                data: { 'size': pageSize, 'page': page },

                success: function (result) {
                    debugger;
                    $("#resultTable").html(result);//use returned data to render data table
                },
                error: function () {

                    alert("Page Link ajax Error")
                }
            });
            e.preventDefault();//disable default click event in order to only trigger ajax
        });

        $("#search").click(function () {
            var form = $("#myForm");

            var data = form.serialize();//must serialize form in order to retrieve send all textBox data at one-go

            //validate form data before send to controller
            if (!$("#myForm").valid()) {

                return false;
            }

            $.ajax({
                type: "POST",
                url: "/Search/submitSearch",
                data: data,
                success: function (result) {
                    debugger;
                    $("#resultTable").html(result);//use returned data to render data table

                },
                error: function () {

                    alert("search click ajax error")
                }
            });

        });

        $("#clear").click(function () {
            $("#myForm").find("input[type=text], textarea").val("");//clear all search input field

            var form = $("#myForm");

            var data = form.serialize();//must serialize form in order to retrieve send all textBox data at one-go

            //validate form data before send to controller
            if (!$("#myForm").valid()) {

                return false;
            }

            $.ajax({
                type: "POST",
                url: "/Search/SubmitSearch",
                data: data,
                success: function (result) {
                    debugger;
                    $("#resultTable").html(result);//use returned data to render data table
                },
                error: function () {

                    alert("search click ajax error")
                }
            });

        });
    });
</script>